import math
import torch
import torch.nn as nn
from torch_geometric.nn import global_add_pool, radius
from torch_geometric.utils import remove_self_loops
from torch_sparse import SparseTensor
from torch_scatter import scatter

import os.path as osp
import time
import argparse
import numpy as np
import pandas as pd
import random
import torch
import torch.nn.functional as F
import torch.optim as optim
from torch.nn.utils import clip_grad_norm_
from torch_geometric.data import DataLoader
from warmup_scheduler import GradualWarmupScheduler

from qm9_dataset import QM9

import rdkit
from rdkit import Chem
from rdkit.Chem import Draw
from rdkit.Chem.rdchem import HybridizationType
from rdkit.Chem.rdchem import BondType as BT
from rdkit import RDLogger

from matplotlib import pyplot as plt

class MyTransform(object):
    def __call__(self, data):           # 함수를 호출하는 것처럼 클래스의 객체도 호출할 수 있게 만드는 매직 메소드 (__로 시작)
        data.y = data.y[:, target]
        return data

#Download and preprocess dataset
path = osp.join(osp.dirname(osp.realpath(__file__)), '.', 'data', 'QM9')    # os.path : 디렉토리 + 파일 이름
dataset = QM9(path, transform=MyTransform()).shuffle()                     # qm9_dataset 확인

suppl = Chem.SDMolSupplier(dataset.raw_paths[0], removeHs=False, sanitize=False)

def molecule(i):
    mol = suppl[i]
    N = mol.GetNumAtoms()
    pos = suppl.GetItemText(i).split('\n')[4:4 + N]
    pos = [[float(x) for x in line.split()[:3]] for line in pos]
    pos = torch.tensor(pos, dtype=torch.float)

    type_idx = []  # types = {'H': 0, 'C': 1, 'N': 2, 'O': 3, 'F': 4}
    atomic_number = []
    aromatic = []
    sp = []
    sp2 = []
    sp3 = []
    num_hs = []
    for atom in mol.GetAtoms():
        type_idx.append(dataset.types[atom.GetSymbol()])
        atomic_number.append(atom.GetAtomicNum())
        aromatic.append(1 if atom.GetIsAromatic() else 0)
        hybridization = atom.GetHybridization()
        sp.append(1 if hybridization == HybridizationType.SP else 0)
        sp2.append(1 if hybridization == HybridizationType.SP2 else 0)
        sp3.append(1 if hybridization == HybridizationType.SP3 else 0)

    z = torch.tensor(atomic_number, dtype=torch.long)

    row, col, edge_type = [], [], []
    for bond in mol.GetBonds():
        start, end = bond.GetBeginAtomIdx(), bond.GetEndAtomIdx()
        row += [start, end]
        col += [end, start]
        edge_type += 2 * [
            dataset.bonds[bond.GetBondType()]]  # bonds = {BT.SINGLE: 0, BT.DOUBLE: 1, BT.TRIPLE: 2, BT.AROMATIC: 3}

    edge_index = torch.tensor([row, col], dtype=torch.long)  # [2, num_edges] > [ [num~], [num~] ]
    edge_type = torch.tensor(edge_type, dtype=torch.long)  # [num_edges]
    edge_attr = F.one_hot(edge_type, num_classes=len(dataset.bonds)).to(torch.float)  # [ num, 4 ] 원-핫 인코딩

    perm = (edge_index[0] * N + edge_index[1]).argsort()  # 그냥 섞는 용도? [엣지1] ⊙ 원자수 + [엣지2]
    edge_index = edge_index[:, perm]
    edge_type = edge_type[perm]
    edge_attr = edge_attr[perm]
    x = torch.tensor(type_idx).to(torch.float)  # 원자 인덱싱 벡터
    return mol, pos, x, edge_index
mol, pos, x, edge_index = molecule(18)    # types = {'H': 0, 'C': 1, 'N': 2, 'O': 3, 'F': 4}

mols = [x for x in suppl if x is not None]
ms = mols[:20]
img=Draw.MolsToGridImage(ms,molsPerRow=10,subImgSize=(300,300),legends=[x.GetProp("_Name") for x in ms])
img=Draw.MolToImage(mol)
plt.imshow(img)
# img.save('test.png')

num_nodes = x.size(0)
row, col = edge_index
value = torch.arange(row.size(0), device=row.device)  # 엣지 인덱스
adj_t = SparseTensor(row=col, col=row, value=value, sparse_sizes=(num_nodes, num_nodes))

# Compute the node indices for two-hop angles
adj_t_row = adj_t[row]
num_triplets = adj_t_row.set_value(None).sum(dim=1).to(torch.long)

idx_i = col.repeat_interleave(num_triplets)
idx_j = row.repeat_interleave(num_triplets)
idx_k = adj_t_row.storage.col()
mask = idx_i != idx_k
idx_i_1, idx_j, idx_k = idx_i[mask], idx_j[mask], idx_k[mask]

idx_kj = adj_t_row.storage.value()[mask]
idx_ji_1 = adj_t_row.storage.row()[mask]

# Compute the node indices for one-hop angles
adj_t_col = adj_t[col]

num_pairs = adj_t_col.set_value(None).sum(dim=1).to(torch.long)
idx_i_2 = row.repeat_interleave(num_pairs)
idx_j1 = col.repeat_interleave(num_pairs)
idx_j2 = adj_t_col.storage.col()

idx_ji_2 = adj_t_col.storage.row()
idx_jj = adj_t_col.storage.value()

idx_i_1, idx_j, idx_k, idx_kj, idx_ji_1,             idx_i_2, idx_j1, idx_j2, idx_jj, idx_ji_2
